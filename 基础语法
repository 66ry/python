一：基础语法
#注释  ''' '''不改变输出句式结构
二：变量类型 int float 列表【】 元组（） 字典{} 元组不允许更新 查类型用type 类型转换在转换的地方加变量类型
三：运算符：整数相除得整数，想得到小数把一个改为浮点数就行 位运算符：&与 |或  ^异或 -取反  逻辑运算符：and与 or或 not非  成员运算符：in在里面 not in不在里面 身份运算符：判断是不是引用一个对象 is is not
四：条件语句 if...else....  python 不支持switch语句多个条件判断只能用elif
五：循环语句：for循环又叫重复循环语句 和while循环判断正确执行语句  python中没有do...while...循环，循环控制语句break,continue。pop()函数用于移除列表中的一个元素（默认最后一个元素并返回该值）,append()在列表末尾添加新的对象，while中使用if while..else
六：for循环语句：
input()输出的是字符串 加减需要字符转换
str-->int int(a) 如果是’3.3‘是字符串还带小数点转为int时出错
str float()
float-->int() 会把小数点后的位数去掉
当变量的值是零和空字符串转布尔为falase   bool
运算符
算术运算符 +——*/
print(a,b,c)输出结果之间是空格，让输出之间不是空格用sep='#'更改如print(a,b,c,sep='#')之间是井号，箭头指向为下一行因为有print(a,b,c,end='\n')不让箭头指向下一行去\n
print(2/3)结果有小数点 print(//)整除 print(a**b)a的b次方，print(%)取余2%3=1
如键盘输入个位十位百位
print(123%10)个位
print（123//10%10）十位
print(123//100)百位
对一个数字求个十百千等的方法：%10得各位 依次//整除再%，最后一位直接整除他的1000倍数；
赋值运算符
+=，-=，//=
比较关系运算符
>= != is 字符串的比较是不相同的asc码值
逻辑运算符与或非
and or not结果为布尔类型 and与print（a and b）两个都为非零时结果输出为最后一个，有0的话结果都是0 print(a or b)有一个是真直接输出该值，print(a==c or a<b)运用登入手机号或qq号
输出格式化%s %d %f
进制转换：bin（）二进制 oct()八进制 hex()十六进制 前缀0b二进制 0o二进制 0x十六进制 
位运算：针对二进制进行的运算 & | ^ << >> -
负数的二进制转换先求正的
《》左移如n=12 一位*2 二位*4 右移动n=12 一位//2 **最高优先级，括号可以改变优先级的顺序，如果false true 参与运算false 0 true 1如print（1+ture）=2
总结
1.算术运算符
2.赋值运算符 = += -= 3.比较运算符< > == != 4.逻辑运算符and or not 5.位运算符 & | ^- << >> -7的负数二进制
6.运算符的优先级：加（）可改变优先级的顺序
条件语句
if ..else..   if..elif..else....
if 条件的语句
abs()内置函数绝对值
导入函数随机值 imoprt random  ,ran=random.randint()
%还有格式化输出的意思 如user=name print('%s' %user)
格式：c=a if a<b else b 符合是c=a否则是b
自动类型转换：在python中，转换成为布尔值时，只有 0，'',"",(),[],{}会被转换成false,其它转换true
循环语句
1.while 2.for
while 条件：
  要循环的代码# 初始值
n=1
# 结束条件
while n<=10:
    print('--->n=%d'%n)
    #变量要有变化
    n +=1 
    while中加break跳出整个循环
   for i in range(1,10):range包括前不包括后，range(n):默认从0开始取值到n-1结束，range(start,stop):[start,stop），range(start,stop,step)步长
  for ..else.. while..esle 不被中断才会执行else
  for和while区别... for i in rande(n): pass 有固定的次数   while 条件：pass 不确定的次数循环
  掷色子
  while n<5:外层控制行数
    ...
    while m<n:
      print('*',end='')内层控制打印*
     n+=1
     print()
     切片操作
     id（）地址  is是比较两个的地址是否一致
     index索引
    find:从左向右查找，如果遇到一个结果符合要求的则返回位置，不符合要求返回-1，rfind从右开始查找
    count:统计指定字符的个数，index与find的区别，index也是表示查找，如果找不到会报错
    判断startswith,endswith,isalpha,判断是否以什么开头，返回值都是布尔类型
    ath='https://www.bing.com/images/s_earch?view=detailV2&ccid=s20ksC'
i=path.find('_')
print(i)
替换内容：replace(old,new,count)默认全部替换，count指定次数
切割字符：split,rsplit,splitlines,split('分隔符')返回的结果是一个列表
修改大小写：title，upper，lower
format()格式化，
添加append()
排序冒泡
num=[2,4,1,6,7,8,9,0]
for j in range(0,len(num)-1):#轮数
    for i in range(0,len(num)-1-j):#两两比较
        if num[i]>num[i+1]:
            a=num[i]
            num[i]=num[i+1]
            num[i+1]=a
 print(num)
 两数交换使用a,b=b,a
 排序用 sort和reverse反转

删除：pop, remove ,clear
pop(index)；根据下标删除列表中的元素，下标不要超出范围
remove()根据元素名称删除，如果删除的不存在则报错，如果列表中存在多个同名元素element,只删除遇到的第一个元素，后面的元素不会删除
insert（）找准位置添加 ，index()根据元素找到该元素的位置下标
查找
1.元素 in列表 返回bool类型
2，列表.index(元素)返回元素的下标位置，如果没有此元素报错3.列表.count(元素) 返回整数 返回值是0则表示不存在此元素 
numbers.sort(reverse=True)#默认升序的，可以通过reverse参数控制升序还是降序,numbers.reverse()单纯的进行反转没有排序
元组：
元组与列表相似，元组的元素不能进行修改，元组使用()，列表使用[] list() tuple[] 注意元组中只有一个元素时用逗号
元组可以和列表之间相互转换使用关键字list() 和tuple()
字典：{}
元素：键值对 注意：键是唯一的值允许重复  无下标切片
popitem() 返回值（key,value）从后往前删除,clear()清空
添加元素：字典名[key]=value ，key是唯一字典的，所以在添加的时候如果出现同名的key,后面的key对应的value则替换原来的，关键看"键"，如果字典中不存在键，则是添加，否则是修改
pop()
遍历和查询：
dict1={}
# print(type(dict1))
# dict1['name']='龙'
# print(dict1)
# book={}
# book['价格']=8
# book['作者']='梁飞'
# print(book)
# //字典的删除
# book={'书名':'人生简介','价格':38}
# r=book.popitem()
# print(r)
# # print(book)
# print(book)
# books=[{'书名':'三体','作者':'刘子欣','价格':'30'},{'书名':'流浪地球','作者':'梁飞','价格':'39'}]
# for book in books:
#     book.pop('书名')
# print(books)
# 遍历和查询
# 获取
# dict.get(key):根据key获取其value值
# dict[key]:根据key获取其value值
# 区别：get()的值如果不存在，返回默认值，dict[]报错
# book={'书名':'三体','作者':'刘子欣','价格':'30'}
# value=book.get('书名1','默认')

# 根据key得到value值
# print(value)
# value=book['书名']
# print(value)
# list1=[1,4,5,8,9]
# for i in list1:
#     print(i)
book={'书名':'三体','作者':'刘子欣','价格':'30'}
# 获取字典所有值 dist.values()

# for i in book.values():
# 获取字典的所有value值;字典.values(),将所有的值存放到了一个列表
#     print(i)
# print(list(book.values()))
# 如果使用for..in....直接遍历字典取出的是字典的key
# 获取字典所有值key:字典.keys()----['书名','价格','作者']
#     print(i)
# print(book.keys())
# for i in book.keys():
#     print(i)
# print(book.items())
# for i in book.items():
#     print(i)
# for k,v in book.items():
#     print(k,v)
# 获取键值对：字典.items() --->[(key,value),(),()]
# book.setdefault('出版社','人民教育出版社')
# print(book)
# book.setdefault('chu')
# 只能添加键值对，不能修改
# dict1={'a':10,'b':45}
# book.update(dict1)
# print(book)
# update()实现两个字典的合并
list:允许重复，有序，有下标[]
tuple:允许重复，里面的元素不能删除修改，只能查看（）
dict:键值对存在，键唯一，值允许重复{}
set:不允许重复，无序
类型转换
list-->tuple()
# list-->dict
# 特殊要求
list1=[('a',10),('b',20),('c',30)]
print(dict(list1))
类型转换
list-->tuple,set(长度有可能发生改变)
tuple-->list,set
dict-->list,tuple,set只是将键放在里面
内置方法
chr(65)给asill值返回字母
ord('a')给字母返回数字
加f，print(f'{name}')其中 { } 相当于占位符，程序运行时花括号部分会变成相应的变量值，如果print('{name}')中 f 被去掉，就是普通的打印功能，原封不动地打印字符串 {name}
格式化输出
# library=[{'bookname':'西游记','author':'吴承恩','price':100,'number':40},
#          {'bookname':'水浒传','author':'是耐盐','price':100,'number':40},
#          {'bookname':'红楼梦','author':'曹雪芹','price':100,'number':40},
#          {'bookname':'天珠变','author':'谈三少','price':100,'number':40},
#          {'bookname':'西游记','author':'哎呦','price':100,'number':40}]
# choice=int(input('\n1.借书 \n2.还书\n3.查询\n4.查看所有\n5.退出\n请选择你需要的服务:'))
# while True:
#     if choice==1:
#         print('借书')
#     elif choice==2:
#         print('还书')
#     elif choice==3:
#         choice_chaxun=input('查询人物(1)or作者（2）:')
#         if choice_chaxun=='1':
#             print('请输入你要查询的书名')
#         elif choice_chaxun=='2':
#             print('请输入你要查询的作者名:')
#         else:
#             print('你打错了')
#     elif choice==4:
#         print('查看所有')
#         for book in library:
#             print(f"图书名:{book['bookname']},作者:{book['author']}")
#         break
#     elif choice==5:
#         print('退出')
#         break
#     else:
#         print('请重新选择')
# 列表推导式：
# 格式：[i for i in 可迭代的]
# list=[]
# for i in range(1,21):
#     list.append(i)
# print(list)
list1=[i for i in range(1,21)]
print(list1)
list1=[i+2 for i in range(1,21)]
print(list1)
# 0-100之间的所有偶数 存放到列表中
list1=[i for i in range(0,101,2)]
print(list1)
# 格式2；[i for i in 可迭代的 if 条件]
list1=[i for i in range(0,101) if i%2==0]
print(list1)
list2=['62','hello','100','word','luck','88']
list3=[word for word in list2 if word.isalpha()]
print(list3)
# list2 如果是h开头的将首字母大写，不是h开头的全部转大写
list4=[word.title() if word.startswith('h') else word.upper() for word in list2]
print(list4)
64.函数定义
# # 图书管理系统
# # 函数：复用
# def 函数名(参数名):
#     代码
# 函数名:get_name():
# 代码：封装重复内容
# import random
# def generate_code():
#     #生成验证码
#     s='qwertyuiolkjhgdfaszccvnm123456'
#     code=''
#     for i in range(4):
#         r=random.choice(s)
#         code+=r
#     print(code)
# print(generate_code)
# #函数调用：函数名()
# generate_code()
# def login():
#     username=input('用户名：')
#     password=input('密码')
#     if username=='admin' and password=='1234':
#         print('登入成功')
#     else:
#         print('登入失败')
# login()
# 参数：无参数，有参数
# def 函数名()
# 有参数
# def 函数名(参数1....)
# import random
# def generate_code(n):
#     #生成验证码
#     s='qwertyuiolkjhgdfaszccvnm123456'
#     code=''
#     for i in range(n):
#         r=random.choice(s)
#         code+=r
#     print(code)
# print(generate_code)
# #函数调用：函数名()
# generate_code(5)
# 参数：调用参数时方便传送自己需要的值

'''
带多个参的函数
def 函数名(参数1，参数2)
注意;
在定义
默认值参数；在函数定义时，有一个或多个函数已经赋值
def 函数名（参数1，参数2=值...）
注意：在定义参数时，普通参数位于定义参数的前面
默认参数顺序是固定的解决方法调用时用关键字
'''
# def get_sum(a,b):
#     if type(a)==type(b):
#         s=a+b
#         print(s)
#     else:
#         print('类型不一致')
#
# get_sum(2,5)
# get_sum('hello',3)
#判断是否整型，isinstance(变量，类型):--》返回值是布尔类型
# def get_sum(a,b):
#     print('函数中:',a,b)
#     if isinstance(a,int) and isinstance(b,int):
#
#         s=a+b
#         print(s)
#     else:
#         print('类型不一致')
#
# get_sum(2,5)
# get_sum('hello',3)
#判断用户是否成功登入
# def islogin(username,password,isrember=False):
#     print('是否记住密码?',isrember)
#     #函数体验证usernaem和password
#     if username=='admin' and password=='1234':
#         print('登入成功')
#     else:
#         print('失败')
# islogin('admin','1234')
def borrow_book(bookname,username,number=1,school='100phone'):
    print('进入{}借书系统...'.format(school))
    print('{}要借阅的书名是:{},数量{}'.format(username,bookname,number))
borrow_book('狂人','发')
borrow_book(username='阿泽',bookname='水浒传')
'''

'''
# library=['python','mysql','数据分析','人工智能']
# def add_book(bookname):
#     library.append(bookname)
#     print('图书添加成功')
# def show_book(books):
#     for book in books:
#         print(book)
# add_book('新概念英语')
# show_book(library)
# list1=[23,45,77,80,59,90]
# def get_list(list_1):
    # new_list=[]
    # for e in list_1:
    #     if e>=50:
    #         new_list.append(e)
#     new_list=[e for e in list1 if e>=50]
#     print(new_list)
# get_list(list1)
# def remove_from_list(list_1):
#     n=0
#     while n<len(list_1):
#         if list_1[n]<50:
#             list_1.remove(list_1[n])
#         else:
#             n+=1
#     print(list_1)
# remove_from_list(list1)
'''
*可变参数
*arg 
**kwarhg
拆包和装包
函数装包
def 函数(*args):-->出现装包操作
    pass
函数（1,23,34）
拆包
list,tuple,set
调用的时候
函数(*list)


'''
# 求和
# def get_name(a,b):
#     r=a+b
#     print(r)
# get_name(1,3)
# def get_sum(*args):
#     print(args)
# get_sum(1,23,4,5)
# def get_sum(*args):
#     s=0
#     for i in args:
#         s+=i
#     print('和',s)
# get_sum(1,2,4)
# ran_list=[23,45,56,46,24,56]
# get_sum(*ran_list)
# # 调用的时候加*是拆包
'''
可变参数两颗:**kwargs
关键字参数
在函数调用的时候必须传关键字参数,才可以将其转换成key:value,装到字典中。
'''
def show_book(**kwargs):
    print(kwargs)
    for k,v in kwargs.items():
        print(k,v)
show_book()
# show_book(bookname='西游记',author='吴承恩',number=5)
book={'bookname':'西游记','author':'吴承恩','number':5}
show_book(**book)
print('-----------')
def show_book(*args,**kwargs):
    print(args)
    print(kwargs)
book={'bookname':'坏笑','author':'吴承恩','number':5}
show_book('龙少','小人',**book)
print(book,'hello',sep='---')
result="_".join(['a','b'])
print(result)
71：函数的返回值
'''
参数：外界向里面传值
返回值；里面的内容向外界传递
def 函数名（参数）：
    .....
    return xxxx
当函数调用时通过return向外返回值
注意：只有函数有返回值，则需要接收
return 后面的值可以是一个值，也可以是多个值
如果是多个值 类似：return a,b,c,会将多个值封装在元组里
结果(a,b,c)
'''
# def get_sum(*args):
#     total=0
#     for i in args:
#         total+=i
#         #将total值返回
#     print('内部',total)
#     return total
# t=get_sum(1,2,3)
# print('外侧',t)
# x=100
# x=x+t
# print(x)
def get_maxandmin(numbers):
    #排序冒泡排序
    for i in range(0,len(numbers)-1):
        for j in range(0,len(numbers)-1-i):
            if numbers[j]>numbers[j+1]:
                numbers[j],numbers[j+1]=numbers[j+1],numbers[j]
    min=numbers[0]#获取头部和尾部
    max=numbers[-1]
    return min,max#返回

list1=[23,45,13,57,89,90,34,67]
result=get_maxandmin(list1)
print(result)
a,b=get_maxandmin(list1)
print(a,b)
74全局变量和局部变量
'''
全局和局部变量
声明函数外面的称作全部变量
声明在函数内部的变量，称作局部变量
函数内部可以直接使用全局变量，但不能修改全局变量
如果修改全局变量，则必须使用关键字，global 变量名

'''
# islogin=False
# def login(username,password):
#     if username=='admin' and password=='1234':
#         print('登入成功')
#         global islogin
#         islogin =True
#     else:
#         print('登入失败')
#
# def borrow_books(book_name):
#
#     if islogin:
#         print('成功借阅{}'.format(book_name))
#     else:
#         print('用户还没有登入，不能借书')
#         username=input('用户名：')
#         password=input('密码：')
#         login(username,password)
#--------------===
# def borrow_books(book_name):
#     username=input('用户名：')
#     password=input('密码：')
#     if islogin(username,password):
#         print('成功借阅{}'.format(book_name))
#     else:
#         print('还未登入，不能借书')
# borrow_books('草房子')
# borrow_books('草房子')
#11111111111111111111111111111111111111111111111111111
a=100
def test1():
    a=0
    b=8
    print('a=',a)
    print('b=',b)
def test2():
    b=9
    print('a=', a)
    print('b=', b)
def test3():
    global a
    a=90
    print('a=', a)

test1()
test3()
test2()
'''
全局变量和局部变量
global关键字的添加：
只有不可变的类型才需要添加global
可变的类型不需要添加global
可变与不可变：
不可变：当改变变量的值时，地址发生了改变
类型：int str float bool tuple
可变类型：里面的内容发生改变时地址没有发生改变
类型；list divt set
'''
a=[1,2]
print(id(a))
a=[35,4]
print(id(a))
75：停车计费系统
import random
car_park=[]
def enter():
    print('欢迎进入xx停车场')
    number=input('输入车牌号:')
    #构建结构{'车牌':[0,5]}
    car={}
    car[number]=[0]#字典的value初值
    #添加car_park
    car_park.append(car)
    print('{}已经进场'.format(number))
def go_out():
    number=input('输入车牌号码;')
    #判断汽车是否进场
    for car in car_park:
        if number in car:
            time=random.randint(0,24)
            time_record=car.get(number)#get()获得字典的value值
            time_record.append(time)#要出去的时间给记录
            #计算花费多少钱
            total=time*4
            print('{}停车{}小时,应缴费{}'.format(number,time,total))
            break

        else:
            print('此车未进场')
enter()
go_out()
#dict.get(key)=value





 
